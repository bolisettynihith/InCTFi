

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_16 = Integer(16); _sage_const_0 = Integer(0); _sage_const_420462 = Integer(420462); _sage_const_1040400 = Integer(1040400); _sage_const_0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF = Integer(0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF); _sage_const_3 = Integer(3); _sage_const_0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B = Integer(0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B)
import hashlib, pickle
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from tqdm import trange

val = pickle.load(open('enc.pickle', 'rb'))

def decrypt(msg, iv, key):
	key = hashlib.sha256(str(key).encode()).digest()[:_sage_const_16 ]
	cipher = AES.new(key, AES.MODE_CBC, iv)
	try:
		out = unpad(cipher.decrypt(msg), _sage_const_16 )
		assert b'inctf{' in out
		return  out
	except:
		return False

def main(EC, val):
	G = EC.gens()[_sage_const_0 ]
	cip = bytes.fromhex(val['cip'])
	iv = bytes.fromhex(val['iv'])
	for i in trange(_sage_const_420462 , _sage_const_1040400 ):
		P = i*G
		ret = decrypt(cip, iv, P.xy()[_sage_const_0 ])
		if ret!=False:
			return ret

if __name__ == '__main__':
	p = _sage_const_0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF 
	a = p - _sage_const_3 
	b = _sage_const_0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B 
	EC = EllipticCurve(GF(p), [a, b])
	print(main(EC, val))

