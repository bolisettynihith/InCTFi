from hashlib import sha256
from os import remove
from BLS import G2ProofOfPossession as bls
from py_ecc.bls.g2_primitives import G2_to_signature, signature_to_G2
from py_ecc.optimized_bls12_381 import add, multiply, neg
from gmpy2 import invert
from json import dumps
from signer import result
from pwn import *

unhex = lambda i : bytes.fromhex(i)

def bytexor(data,pad):
    assert len(data) == len(pad)
    return bytes(i^j for i,j in zip(data,pad))

def connect(data):
    Host, Port = b'crypto.challenge.bi0s.in', 1337
    io = remote(Host,Port)
    # io = process('./server.py')
    for i in data:
        j = dumps({"Name": i["Name"], "Vote": i["Vote"], "Sign": i["Sign"]})
        io.recvuntil(b'> ')
        io.sendline(j)
    # io.interactive()
    io.recvuntil(b'reward : ')
    return io.recvline().strip()



order = 52435875175126190479447740508185965837690552500527637822603658699938581184513
m1,m2 = [int(sha256(i).hexdigest(),16) for i in [b"D",b"R"] ]
idx,ny = [(i,j) for i,j in enumerate(result) if j["Name"] == 'New York' ][0]
ny["Sign"] = G2_to_signature( multiply( multiply( signature_to_G2( unhex(ny["Sign"]) ), invert(m1,order)), m2)).hex()
ny["Vote"] = "R"
assert bls.Verify(unhex(ny["PK"]) ,ny["Vote"].encode() ,unhex(ny["Sign"]) )
result[idx] = ny

xored_flag = unhex(connect(result).decode())

fake_result = result[:]
w = fake_result[idx+1]
ny = fake_result[idx]
ny["Sign"] = G2_to_signature( add(signature_to_G2(unhex(ny["Sign"])), multiply(signature_to_G2(unhex(w["Sign"])), 2)  )).hex()
w["Sign"] = G2_to_signature( neg( signature_to_G2( unhex(w["Sign"]) ))).hex()
assert bls.Verify(bls._AggregatePKs([unhex(ny["PK"]), unhex(w["PK"])]), b'R', bls.Aggregate([unhex(ny["Sign"]), unhex(w["Sign"])]))
fake_result[idx]   = ny
fake_result[idx+1] = w 

fake_flag = connect(fake_result)


flag = bytexor(fake_flag,xored_flag)

print(flag)

assert flag == b'inctf{BLS_574nd5_f0r_B0n3h_Lynn_Sh4ch4m}'
